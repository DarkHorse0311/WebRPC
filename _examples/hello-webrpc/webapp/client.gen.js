
// This file has been generated by https://github.com/webrpc/webrpc using gen/javascript
// Do not edit by hand. Update your webrpc schema and re-generate.


var Kind;
(function (Kind) {
  Kind["USER"] = "USER";
  Kind["ADMIN"] = "ADMIN";
})(Kind || (Kind = {}));

class Empty {
  constructor(_data) {
    this._data = {};
    if (_data) {
      
    }
  }
  
  toJSON() {
    return this._data;
  }
}

class GetUserRequest {
  constructor(_data) {
    this._data = {};
    if (_data) {
      this._data['userID'] = _data['userID'];
      
    }
  }
  get UserID() {
    return this._data['userID'];
  }
  set UserID(value) {
    this._data['userID'] = value;
  }
  
  toJSON() {
    return this._data;
  }
}

class User {
  constructor(_data) {
    this._data = {};
    if (_data) {
      this._data['id'] = _data['id'];
      this._data['USERNAME'] = _data['USERNAME'];
      this._data['created_at'] = _data['created_at'];
      
    }
  }
  get ID() {
    return this._data['id'];
  }
  set ID(value) {
    this._data['id'] = value;
  }
  get Username() {
    return this._data['USERNAME'];
  }
  set Username(value) {
    this._data['USERNAME'] = value;
  }
  get CreatedAt() {
    return this._data['created_at'];
  }
  set CreatedAt(value) {
    this._data['created_at'] = value;
  }
  
  toJSON() {
    return this._data;
  }
}

  
// Client

const ExampleServicePathPrefix = "/rpc/ExampleService/"

class ExampleService {
  constructor(hostname, fetch) {
    this.path = '/rpc/ExampleService/';
    this.hostname = hostname;
    this.fetch = fetch;
  }

  url(name) {
    return this.hostname + this.path + name;
  }

  
  Ping(headers = {}) {
    return this.fetch(
      this.url('Ping'),
      
      createHTTPRequest({}, headers)
      
    ).then((res) => {
      if (!res.ok) {
        return throwHTTPError(res);
      }
      
      return res.json().then((_data) => {return (_data);});
      
    })
  }
  
  GetUser(params, headers = {}) {
    return this.fetch(
      this.url('GetUser'),
      
      createHTTPRequest(params, headers)
      
    ).then((res) => {
      if (!res.ok) {
        return throwHTTPError(res);
      }
      
      return res.json().then((_data) => {return new User(_data);});
      
    })
  }
  
}



const throwHTTPError = (resp) => {
  return resp.json().then((err) => { throw err; });
}

const createHTTPRequest = (body = {}, headers = {}) => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  };
}


