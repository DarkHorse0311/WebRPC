// example v0.0.1
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/golang
// Do not edit by hand. Update your webrpc schema and re-generate.
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/gorilla/websocket"
	"github.com/webrpc/webrpc/lib/webrpc-go"
)

type Kind uint32

const (
	Kind_USER  Kind = 1
	Kind_ADMIN Kind = 2
)

var Kind_name = map[uint32]string{
	1: "USER",
	2: "ADMIN",
}

var Kind_value = map[string]uint32{
	"USER":  1,
	"ADMIN": 2,
}

func (x Kind) String() string {
	return Kind_name[uint32(x)]
}

func (x Kind) MarshalJSON() ([]byte, error) {
	buf := bytes.NewBufferString(`"`)
	buf.WriteString(Kind_name[uint32(x)])
	buf.WriteString(`"`)
	return buf.Bytes(), nil
}

func (x *Kind) UnmarshalJSON(b []byte) error {
	var j string
	err := json.Unmarshal(b, &j)
	if err != nil {
		return err
	}
	*x = Kind(Kind_value[j])
	return nil
}

type User struct {
	Id        uint64                 `json:"id"`
	Username  string                 `json:"username"`
	Role      *Kind                  `json:"role"`
	Meta      map[string]interface{} `json:"meta"`
	CreatedAt *time.Time             `json:"created_at,omitempty" db:"created_at"`
}

type ChatMsg struct {
	Channel string `json:"channel"`
	From    *User  `json:"from"`
	Msg     string `json:"msg"`
}

type ExampleService interface {
	Ping(ctx context.Context) (bool, error)
	GetUser(ctx context.Context, userID uint64) (*User, error)
	Auth(ctx context.Context, t string) (bool, error)
	Chat(ctx context.Context, msg *ChatMsg) (*ChatMsg, error)
}

// type ExampleService2 interface {
// 	Ping(ctx context.Context) (bool, error)
// 	GetUser(ctx context.Context, userID uint64) (*User, error)
// 	Auth(ctx context.Context, t string) (bool, error)
//
//  // client -- server
// 	Chat(ctx context.Context) (*ChatStreamClient, error)
// }

var Services = map[string][]string{
	"ExampleService": {
		"Ping",
		"GetUser",
		"Auth",
		"Chat",
	},
}

// Client

const ExampleServicePathPrefix = "/rpc/ExampleService/"

type exampleServiceWSClient struct {
	conn  *websocket.Conn
	seqID int64
}

func NewExampleServiceWSClient(addr string) (ExampleService, error) {
	u := url.URL{Scheme: "ws", Host: addr, Path: "/rpc/ExampleService"}
	log.Printf("ws: connecting to %s", u.String())

	c, _, err := websocket.DefaultDialer.Dial(u.String(), nil)
	if err != nil {
		return nil, err
	}

	return &exampleServiceWSClient{
		conn: c,
	}, nil
}

// --> {"jsonrpc": "2.0", "method": "subtract", "params": {"subtrahend": 23, "minuend": 42}, "id": 3}
// <-- {"jsonrpc": "2.0", "result": 19, "id": 3}
//
// --> {"jsonrpc": "2.0", "method": "subtract", "params": {"minuend": 42, "subtrahend": 23}, "id": 4}
// <-- {"jsonrpc": "2.0", "result": 19, "id": 4}

type JSONRPCRequest struct {
	Version string      `json:"jsonrpc"`
	ID      int64       `json:"id"`
	Method  string      `json:"method"`
	Params  interface{} `json:"params"`
}

type JSONRPCResponse struct {
	Version string      `json:"jsonrpc"`
	ID      int64       `json:"id"`
	Result  interface{} `json:"result"`
}

func (c *exampleServiceWSClient) Ping(ctx context.Context) (bool, error) {
	// fnOut := struct {
	// 	Ret0 bool `json:"status"`
	// }{}

	// err := doJSONRequest(ctx, c.client, c.urls[0], nil, &out)
	// return out.Ret0, err

	c.seqID += 1
	reqId := c.seqID

	req := JSONRPCRequest{
		Version: "2.0",
		ID:      reqId,
		Method:  "Ping",
		Params:  nil,
	}

	reqBody, err := json.Marshal(req)
	if err != nil {
		return false, clientError("failed to marshal json request", err)
	}

	err = c.conn.WriteMessage(websocket.TextMessage, reqBody)
	if err != nil {
		return false, err
	}

	// TODO: lets timeout for how long we wait, etc...
	_, message, err := c.conn.ReadMessage()
	if err != nil {
		log.Println("read:", err)
		return false, err
	}
	log.Printf("client recv: %s", message)

	// TODO: unmarshal, tec...........

	return false, nil
}

func (c *exampleServiceWSClient) GetUser(ctx context.Context, userID uint64) (*User, error) {
	return nil, nil
}

func (c *exampleServiceWSClient) Auth(ctx context.Context, t string) (bool, error) {
	return false, nil
}

func (c *exampleServiceWSClient) Chat(ctx context.Context, msg *ChatMsg) (*ChatMsg, error) {
	return nil, nil
}

type exampleServiceClient struct {
	client HTTPClient
	urls   [4]string
}

func NewExampleServiceClient(addr string, client HTTPClient) ExampleService {
	prefix := urlBase(addr) + ExampleServicePathPrefix
	urls := [4]string{
		prefix + "Ping",
		prefix + "GetUser",
		prefix + "Auth",
		prefix + "Chat",
	}
	return &exampleServiceClient{
		client: client,
		urls:   urls,
	}
}

func (c *exampleServiceClient) Ping(ctx context.Context) (bool, error) {
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[0], nil, &out)
	return out.Ret0, err
}

func (c *exampleServiceClient) GetUser(ctx context.Context, userID uint64) (*User, error) {
	in := struct {
		Arg0 uint64 `json:"userID"`
	}{userID}
	out := struct {
		Ret0 *User `json:"user"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[1], in, &out)
	return out.Ret0, err
}

func (c *exampleServiceClient) Auth(ctx context.Context, t string) (bool, error) {
	in := struct {
		Arg0 string `json:"t"`
	}{t}
	out := struct {
		Ret0 bool `json:"status"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[2], in, &out)
	return out.Ret0, err
}

func (c *exampleServiceClient) Chat(ctx context.Context, msg *ChatMsg) (*ChatMsg, error) {
	in := struct {
		Arg0 *ChatMsg `json:"msg"`
	}{msg}
	out := struct {
		Ret0 *ChatMsg `json:"msg"`
	}{}

	err := doJSONRequest(ctx, c.client, c.urls[3], in, &out)
	return out.Ret0, err
}

// Server

type exampleServiceServer struct {
	ExampleService
	wsUpgrader websocket.Upgrader
}

func NewExampleServiceServer(svc ExampleService) WebRPCServer {
	return &exampleServiceServer{
		ExampleService: svc,
		wsUpgrader: websocket.Upgrader{
			ReadBufferSize:  1024,
			WriteBufferSize: 1024,
		},
	}
}

func (s *exampleServiceServer) WebRPCVersion() string {
	return "v0.0.1"
}

func (s *exampleServiceServer) ServiceVersion() string {
	return "v0.1.0"
}

func (s *exampleServiceServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()
	ctx = webrpc.WithResponseWriter(ctx, w)
	ctx = webrpc.WithServiceName(ctx, "ExampleService")

	// websocket upgrade
	if r.URL.Path == "/rpc/ExampleService" {
		// GET method
		s.upgradeToWebsocket(ctx, w, r)
		return
	}

	// http
	if r.Method != "POST" {
		err := webrpc.Errorf(webrpc.ErrBadRoute, "unsupported method %q (only POST is allowed)", r.Method)
		writeJSONError(ctx, w, r, err)
		return
	}

	// TODO: could also just have..
	// /rpc/ExampleService/Call
	// /rpc/ExampleService/Connect

	// but how about http2? prob best to use json-rpc everywhere...

	// and using json-rpc, we include the method and args, etc......
	// its an idea anyways......

	switch r.URL.Path {
	case "/rpc/ExampleService/Ping":
		s.servePing(ctx, w, r)
		return
	case "/rpc/ExampleService/GetUser":
		s.serveGetUser(ctx, w, r)
		return
	case "/rpc/ExampleService/Auth":
		s.serveAuth(ctx, w, r)
		return
	case "/rpc/ExampleService/Chat":
		s.serveChat(ctx, w, r)
		return
	default:
		err := webrpc.Errorf(webrpc.ErrBadRoute, "no handler for path %q", r.URL.Path)
		writeJSONError(ctx, w, r, err)
		return
	}
}

func (s *exampleServiceServer) upgradeToWebsocket(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	conn, err := s.wsUpgrader.Upgrade(w, r, nil)
	if err != nil {
		// TODO: ensure we respond with error -- prob assumee Upgrader does this for us ..
		log.Println("upgrade", err)
		return
	}
	defer conn.Close()
	for {
		// request
		mt, message, err := conn.ReadMessage()
		if err != nil {
			log.Println("read:", err)
			// break
		}
		log.Printf("server recv: %s", message)

		if websocket.TextMessage != mt {
			log.Println("invalid message type..", mt)
			// options:
			// TextMessage = 1
			// BinaryMessage = 2
			// CloseMessage = 8
			// PingMessage = 9
			// PongMessage = 10

			// TODO: check for various, and handle type, ie. ping/pong/close
			// skip binary for now..
			break
		}

		// TODO: client cancel, timeout, etc.......
		// encoding like gzip..?
		// and send binary etc...? maybe.......
		// for encrypted messaging.. data will be binary
		// so, can prob use WriteMessage() with Binary encoding
		// pretty fine.. json unmarshaller tho?

		// handle
		var req JSONRPCRequest
		err = json.Unmarshal(message, &req)
		if err != nil {
			log.Println("server handle/parse err", err)
			break
		}

		log.Println("handle......................", req)

		// response
		resp := JSONRPCResponse{
			Version: "2.0",
			ID:      req.ID,
			Result:  "reply..........",
		}

		respBody, err := json.Marshal(resp)
		if err != nil {
			log.Println("server marshal error", err)
			break
		}

		err = conn.WriteMessage(mt, respBody)
		if err != nil {
			log.Println("write:", err)
			break
		}
	}
	fmt.Println("upgrade end")
}

func (s *exampleServiceServer) servePing(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePingJSON(ctx, w, r)
	default:
		err := webrpc.Errorf(webrpc.ErrBadRoute, "unexpected Content-Type: %q", r.Header.Get("Content-Type"))
		writeJSONError(ctx, w, r, err)
	}
}

func (s *exampleServiceServer) servePingJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = webrpc.WithMethodName(ctx, "Ping")

	// Call service method
	var ret0 bool
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				writeJSONError(ctx, w, r, webrpc.ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.ExampleService.Ping(ctx)
	}()
	respContent := struct {
		Ret0 bool `json:"status"`
	}{ret0}

	if err != nil {
		writeJSONError(ctx, w, r, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = webrpc.WrapError(webrpc.ErrInternal, err, "failed to marshal json response")
		writeJSONError(ctx, w, r, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *exampleServiceServer) serveGetUser(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetUserJSON(ctx, w, r)
	default:
		err := webrpc.Errorf(webrpc.ErrBadRoute, "unexpected Content-Type: %q", r.Header.Get("Content-Type"))
		writeJSONError(ctx, w, r, err)
	}
}

func (s *exampleServiceServer) serveGetUserJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = webrpc.WithMethodName(ctx, "GetUser")
	reqContent := struct {
		Arg0 uint64 `json:"userID"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = webrpc.WrapError(webrpc.ErrInternal, err, "failed to read request data")
		writeJSONError(ctx, w, r, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = webrpc.WrapError(webrpc.ErrInvalidArgument, err, "failed to unmarshal request data")
		writeJSONError(ctx, w, r, err)
		return
	}

	// Call service method
	var ret0 *User
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				writeJSONError(ctx, w, r, webrpc.ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.ExampleService.GetUser(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 *User `json:"user"`
	}{ret0}

	if err != nil {
		writeJSONError(ctx, w, r, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = webrpc.WrapError(webrpc.ErrInternal, err, "failed to marshal json response")
		writeJSONError(ctx, w, r, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *exampleServiceServer) serveAuth(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveAuthJSON(ctx, w, r)
	default:
		err := webrpc.Errorf(webrpc.ErrBadRoute, "unexpected Content-Type: %q", r.Header.Get("Content-Type"))
		writeJSONError(ctx, w, r, err)
	}
}

func (s *exampleServiceServer) serveAuthJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = webrpc.WithMethodName(ctx, "Auth")
	reqContent := struct {
		Arg0 string `json:"t"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = webrpc.WrapError(webrpc.ErrInternal, err, "failed to read request data")
		writeJSONError(ctx, w, r, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = webrpc.WrapError(webrpc.ErrInvalidArgument, err, "failed to unmarshal request data")
		writeJSONError(ctx, w, r, err)
		return
	}

	// Call service method
	var ret0 bool
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				writeJSONError(ctx, w, r, webrpc.ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.ExampleService.Auth(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 bool `json:"status"`
	}{ret0}

	if err != nil {
		writeJSONError(ctx, w, r, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = webrpc.WrapError(webrpc.ErrInternal, err, "failed to marshal json response")
		writeJSONError(ctx, w, r, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *exampleServiceServer) serveChat(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	header := r.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}

	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveChatJSON(ctx, w, r)
	default:
		err := webrpc.Errorf(webrpc.ErrBadRoute, "unexpected Content-Type: %q", r.Header.Get("Content-Type"))
		writeJSONError(ctx, w, r, err)
	}
}

func (s *exampleServiceServer) serveChatJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	var err error
	ctx = webrpc.WithMethodName(ctx, "Chat")
	reqContent := struct {
		Arg0 *ChatMsg `json:"msg"`
	}{}

	reqBody, err := ioutil.ReadAll(r.Body)
	if err != nil {
		err = webrpc.WrapError(webrpc.ErrInternal, err, "failed to read request data")
		writeJSONError(ctx, w, r, err)
		return
	}
	defer r.Body.Close()

	err = json.Unmarshal(reqBody, &reqContent)
	if err != nil {
		err = webrpc.WrapError(webrpc.ErrInvalidArgument, err, "failed to unmarshal request data")
		writeJSONError(ctx, w, r, err)
		return
	}

	// Call service method
	var ret0 *ChatMsg
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if rr := recover(); rr != nil {
				writeJSONError(ctx, w, r, webrpc.ErrorInternal("internal service panic"))
				panic(rr)
			}
		}()
		ret0, err = s.ExampleService.Chat(ctx, reqContent.Arg0)
	}()
	respContent := struct {
		Ret0 *ChatMsg `json:"msg"`
	}{ret0}

	if err != nil {
		writeJSONError(ctx, w, r, err)
		return
	}
	respBody, err := json.Marshal(respContent)
	if err != nil {
		err = webrpc.WrapError(webrpc.ErrInternal, err, "failed to marshal json response")
		writeJSONError(ctx, w, r, err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

//
// Helpers
//

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

type WebRPCServer interface {
	http.Handler
	WebRPCVersion() string
	ServiceVersion() string
}

type errResponse struct {
	Status int    `json:"status"`
	Code   string `json:"code"`
	Msg    string `json:"msg"`
	Cause  string `json:"cause,omitempty"`
}

func writeJSONError(ctx context.Context, w http.ResponseWriter, r *http.Request, err error) {
	rpcErr, ok := err.(webrpc.Error)
	if !ok {
		rpcErr = webrpc.WrapError(webrpc.ErrInternal, err, "webrpc error")
	}

	statusCode := webrpc.HTTPStatusFromErrorCode(rpcErr.Code())

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(statusCode)

	errResp := errResponse{
		Status: statusCode,
		Code:   string(rpcErr.Code()),
		Msg:    rpcErr.Error(),
	}
	respBody, _ := json.Marshal(errResp)
	w.Write(respBody)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	return req, nil
}

// doJSONRequest is common code to make a request to the remote service.
func doJSONRequest(ctx context.Context, client HTTPClient, url string, in, out interface{}) error {
	reqBody, err := json.Marshal(in)
	if err != nil {
		return clientError("failed to marshal json request", err)
	}
	if err = ctx.Err(); err != nil {
		return clientError("aborted because context was done", err)
	}

	req, err := newRequest(ctx, url, bytes.NewBuffer(reqBody), "application/json")
	if err != nil {
		return clientError("could not build request", err)
	}
	resp, err := client.Do(req)
	if err != nil {
		return clientError("request failed", err)
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = clientError("failed to close response body", cerr)
		}
	}()

	if err = ctx.Err(); err != nil {
		return clientError("aborted because context was done", err)
	}

	if resp.StatusCode != 200 {
		return errorFromResponse(resp)
	}

	if out != nil {
		respBody, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			return clientError("failed to read response body", err)
		}

		err = json.Unmarshal(respBody, &out)
		if err != nil {
			return clientError("failed to unmarshal json response body", err)
		}
		if err = ctx.Err(); err != nil {
			return clientError("aborted because context was done", err)
		}
	}

	return nil
}

// errorFromResponse builds a webrpc.Error from a non-200 HTTP response.
func errorFromResponse(resp *http.Response) webrpc.Error {
	respBody, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return clientError("failed to read server error response body", err)
	}

	var respErr errResponse
	if err := json.Unmarshal(respBody, &respErr); err != nil {
		return clientError("failed unmarshal error response", err)
	}

	errCode := webrpc.ErrorCode(respErr.Code)

	if webrpc.HTTPStatusFromErrorCode(errCode) == 0 {
		return webrpc.ErrorInternal("invalid code returned from server error response: %s", respErr.Code)
	}

	return webrpc.Errorf(errCode, respErr.Msg)
}

func clientError(desc string, err error) webrpc.Error {
	return webrpc.WrapError(webrpc.ErrInternal, err, desc)
}
