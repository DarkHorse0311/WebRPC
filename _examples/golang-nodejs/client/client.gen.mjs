
// This file has been generated by https://github.com/webrpc/webrpc using gen/javascript
// Do not edit by hand. Update your webrpc schema and re-generate.


export var Kind;
(function (Kind) {
  Kind["USER"] = "USER";
  Kind["ADMIN"] = "ADMIN";
})(Kind || (Kind = {}));

export class Empty {
  constructor(_data) {
    this._data = {};
    if (_data) {
      
    }
  }
  
  toJSON() {
    return this._data;
  }
}

export class GetUserRequest {
  constructor(_data) {
    this._data = {};
    if (_data) {
      this._data['userID'] = _data['userID'];
      
    }
  }
  get UserID() {
    return this._data['userID'];
  }
  set UserID(value) {
    this._data['userID'] = value;
  }
  
  toJSON() {
    return this._data;
  }
}

export class User {
  constructor(_data) {
    this._data = {};
    if (_data) {
      this._data['id'] = _data['id'];
      this._data['USERNAME'] = _data['USERNAME'];
      this._data['created_at'] = _data['created_at'];
      
    }
  }
  get ID() {
    return this._data['id'];
  }
  set ID(value) {
    this._data['id'] = value;
  }
  get Username() {
    return this._data['USERNAME'];
  }
  set Username(value) {
    this._data['USERNAME'] = value;
  }
  get CreatedAt() {
    return this._data['created_at'];
  }
  set CreatedAt(value) {
    this._data['created_at'] = value;
  }
  
  toJSON() {
    return this._data;
  }
}

export class RandomStuff {
  constructor(_data) {
    this._data = {};
    if (_data) {
      this._data['meta'] = _data['meta'];
      this._data['metaNestedExample'] = _data['metaNestedExample'];
      this._data['namesList'] = _data['namesList'];
      this._data['numsList'] = _data['numsList'];
      this._data['doubleArray'] = _data['doubleArray'];
      this._data['listOfMaps'] = _data['listOfMaps'];
      this._data['listOfUsers'] = _data['listOfUsers'];
      this._data['mapOfUsers'] = _data['mapOfUsers'];
      this._data['user'] = _data['user'];
      
    }
  }
  get Meta() {
    return this._data['meta'];
  }
  set Meta(value) {
    this._data['meta'] = value;
  }
  get MetaNestedExample() {
    return this._data['metaNestedExample'];
  }
  set MetaNestedExample(value) {
    this._data['metaNestedExample'] = value;
  }
  get NamesList() {
    return this._data['namesList'];
  }
  set NamesList(value) {
    this._data['namesList'] = value;
  }
  get NumsList() {
    return this._data['numsList'];
  }
  set NumsList(value) {
    this._data['numsList'] = value;
  }
  get DoubleArray() {
    return this._data['doubleArray'];
  }
  set DoubleArray(value) {
    this._data['doubleArray'] = value;
  }
  get ListOfMaps() {
    return this._data['listOfMaps'];
  }
  set ListOfMaps(value) {
    this._data['listOfMaps'] = value;
  }
  get ListOfUsers() {
    return this._data['listOfUsers'];
  }
  set ListOfUsers(value) {
    this._data['listOfUsers'] = value;
  }
  get MapOfUsers() {
    return this._data['mapOfUsers'];
  }
  set MapOfUsers(value) {
    this._data['mapOfUsers'] = value;
  }
  get User() {
    return this._data['user'];
  }
  set User(value) {
    this._data['user'] = value;
  }
  
  toJSON() {
    return this._data;
  }
}

  
// Client

const ExampleServicePathPrefix = "/rpc/ExampleService/"

export class ExampleService {
  constructor(hostname, fetch) {
    this.path = '/rpc/ExampleService/';
    this.hostname = hostname;
    this.fetch = fetch;
  }

  url(name) {
    return this.hostname + this.path + name;
  }

  
  Ping(headers = {}) {
    return this.fetch(
      this.url('Ping'),
      
      createHTTPRequest({}, headers)
      
    ).then((res) => {
      if (!res.ok) {
        return throwHTTPError(res);
      }
      
      return res.json().then((_data) => {return (_data);});
      
    })
  }
  
  GetUser(params, headers = {}) {
    return this.fetch(
      this.url('GetUser'),
      
      createHTTPRequest(params, headers)
      
    ).then((res) => {
      if (!res.ok) {
        return throwHTTPError(res);
      }
      
      return res.json().then((_data) => {return new User(_data);});
      
    })
  }
  
}



export const throwHTTPError = (resp) => {
  return resp.json().then((err) => { throw err; });
}

export const createHTTPRequest = (body = {}, headers = {}) => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  };
}


